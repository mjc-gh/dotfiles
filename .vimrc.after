" Filetype customizations
autocmd FileType javascript,typescript set expandtab sw=2 ts=2 sts=2
autocmd FileType haml set expandtab sw=2 ts=2 sts=2
autocmd FileType terraform set expandtab sw=2 ts=2 sts=2
autocmd FileType gitcommit set tw=72

" Colors and theme
let g:solarized_termtrans=1

set background=dark
colorscheme solarized

highlight clear SignColumn
highlight GitGutterAdd ctermfg=DarkGreen ctermbg=Black
highlight GitGutterChange ctermfg=DarkYellow ctermbg=Black
highlight GitGutterDelete ctermfg=DarkRed ctermbg=Black
highlight GitGutterChangeDelete ctermfg=DarkMagenta ctermbg=Black

augroup SyntaxSettings
  autocmd!
  autocmd BufNewFile,BufRead *.tsx set ft=typescript syntax=typescript
  autocmd BufNewFile,BufRead *.html.inky-haml set ft=haml syntax=haml
augroup END

" Colors and theme
"if !empty($TERMCOLORS)
  "let g:solarized_termcolors=256
"endif

"set background=dark
"colorscheme solarized

" Ignore certain things from Ctrl-P and NERDTree
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*
set wildignore+=*.swp,*~,._*
set wildignore+=*.mako.py,*.pyc,*/tmp/*,*/node_modules/*,*/bower_components/*,*/target/*,*/dist/*,*/build/*,*/public/packs*

let NERDTreeIgnore = ["\.mako.py$", "\.pyc$", "target", "tmp", "node_modules", "bower_components", "public/packs", "build/"]

let g:NERDTreeDirArrowCollapsible = '-'
let g:NERDTreeDirArrowExpandable = '+'

set noswapfile

if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
        \   'name': 'Rust Language Server',
        \   'cmd': {server_info->['rust-analyzer']},
        \   'whitelist': ['rust'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    "nmap <buffer> gs <plug>(lsp-document-symbol-search)
    "nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    "nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    "nmap <buffer> <leader>rn <plug>(lsp-rename)
    "nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    "nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    "nmap <buffer> K <plug>(lsp-hover)
    "nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    "nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

" vim-ai config
let g:vim_ai_roles_config_file = '~/.janus/vim-ai-roles.ini'
let g:vim_ai_token_file_path = "~/.janus/vim-ai-token"
let g:vim_ai_complete = {
      \  "options": {
      \    "endpoint_url": "https://openrouter.ai/api/v1/chat/completions",
      \    "model": "anthropic/claude-sonnet-4.5",
      \    "stream": 0,
      \    "temperature": 1,
      \    "max_completion_tokens": 5000,
      \    "initial_prompt": "",
      \  },
      \}
let g:vim_ai_chat = {
      \  "options": {
      \    "endpoint_url": "https://openrouter.ai/api/v1/chat/completions",
      \    "model": "anthropic/claude-sonnet-4.5",
      \    "stream": 0,
      \    "temperature": 1,
      \    "max_completion_tokens": 5000,
      \    "initial_prompt": "",
      \  },
      \}
let g:vim_ai_edit = {
      \  "options": {
      \    "endpoint_url": "https://openrouter.ai/api/v1/chat/completions",
      \    "model": "anthropic/claude-sonnet-4.5",
      \    "stream": 0,
      \    "temperature": 1,
      \    "max_completion_tokens": 5000,
      \    "initial_prompt": "",
      \  },
      \}
